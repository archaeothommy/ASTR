% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/archchem_basic.R, R/archchem_column_select.R,
%   R/archchem_unit_manipulation.R
\name{archchem}
\alias{archchem}
\alias{as_archchem}
\alias{read_archchem}
\alias{validate}
\alias{format.archchem}
\alias{print.archchem}
\alias{get_contextual_columns}
\alias{get_analytical_columns}
\alias{get_isotope_columns}
\alias{get_element_columns}
\alias{get_ratio_columns}
\alias{get_concentration_columns}
\alias{remove_units}
\alias{unify_concentration_unit}
\title{\strong{archchem}}
\usage{
as_archchem(
  df,
  id_column = "ID",
  context = c(),
  bdl = c("b.d.", "bd", "b.d.l.", "bdl", "<LOD", "<"),
  bdl_strategy = function() NA_character_,
  guess_context_type = TRUE,
  na = c("", "n/a", "NA", "N.A.", "N/A", "na", "-", "n.d.", "n.a.", "#DIV/0!", "#VALUE!",
    "#REF!", "#NAME?", "#NUM!", "#N/A", "#NULL!"),
  drop_columns = FALSE,
  validate = TRUE,
  ...
)

read_archchem(
  path,
  id_column = "ID",
  context = c(),
  delim = "\\t",
  guess_context_type = TRUE,
  na = c("", "n/a", "NA", "N.A.", "N/A", "na", "-", "n.d.", "n.a.", "#DIV/0!", "#VALUE!",
    "#REF!", "#NAME?", "#NUM!", "#N/A", "#NULL!"),
  bdl = c("b.d.", "bd", "b.d.l.", "bdl", "<LOD", "<"),
  bdl_strategy = function() NA_character_,
  drop_columns = FALSE,
  validate = TRUE
)

validate(x, quiet = TRUE, ...)

\method{format}{archchem}(x, ...)

\method{print}{archchem}(x, ...)

get_contextual_columns(x, ...)

get_analytical_columns(x, ...)

get_isotope_columns(x, ...)

get_element_columns(x, ...)

get_ratio_columns(x, ...)

get_concentration_columns(x, ...)

remove_units(x, ...)

unify_concentration_unit(x, unit, ...)
}
\arguments{
\item{df}{a data.frame containing the input table}

\item{id_column}{name of the ID column. Defaults to "ID"}

\item{context}{columns that provide contextual (non-measurement) information;
may be column names, integer positions, or a logical inclusion vector}

\item{bdl}{strings representing “below detection limit” values. By default,
the following are recognized: "b.d.", "bd", "b.d.l.", "bdl", "<LOD", "<"}

\item{bdl_strategy}{function used to replace BDL strings. Defaults to a static
function returning NA}

\item{guess_context_type}{should appropriate data types for contextual columns
be guessed automatically? Defaults to TRUE}

\item{na}{character vector of strings to be interpret as missing values.
By default, the following are recognized: "", "n/a", "NA", "N.A.", "N/A", "na",
"-", "n.d.", "n.a.", "#DIV/0!", "#VALUE!", "#REF!", "#NAME?", "#NUM!", "#N/A",
"#NULL!"}

\item{drop_columns}{should columns that are neither marked as contextual in
\code{context}, nor automatically identified as analytical from the column name,
be dropped to proceed with the reading? Defaults to FALSE}

\item{validate}{should the post-reading input validation be run, which checks
for additional properties of archchem tables. Defaults to TRUE}

\item{...}{further arguments passed to or from other methods}

\item{path}{file path (including extension) to the file to read}

\item{delim}{a character string with the separator for tabular data. Use
\verb{\\t} for tab-separated data. Must be provided for all file types except
\code{.xlsx} or \code{.xls}}

\item{x}{an object of class archchem}

\item{quiet}{should warnings be printed? Defaults to TRUE}

\item{unit}{string with a unit definition that can be understood by
\link[units]{set_units}, e.g. "\%", "kg", or "m/s^2"}
}
\value{
Returns an object of class \code{archchem}, which is a tibble-derived object.
}
\description{
A tabular data format for chemical analysis datasets in
archaeology, including contextual information, numerical elemental, and
isotopic data. Columns are assigned units (using \link[units]{set_units}) and
categories (in an attribute \code{archchem_class}) based on the column name.
The following functions allow to create objects of class \code{archchem}, and to
interact with them.
\itemize{
\item \strong{as_archchem}: Transforms an R \code{data.frame} to an object of class
\code{archchem}.
\item \strong{read_archchem}: Reads data from a file (.csv, .xls, .xlsx) into
an object of class \code{archchem}.
\item \strong{validate}: Performs additional validation on \code{archchem} and returns
a \code{data.frame} as a workable list of potential issues.
\item \strong{get_..._columns}: Subsets \code{archchem} tables to columns of a certain
category (or \code{archchem_class}), e.g. only contextual data columns.
\item \strong{remove_units}: Removes unit vector types from the analytical columns
in an \code{archchem} table and replaces them with simple numeric columns of type
\code{double}.
\item \strong{unify_concentration_unit}: Unifies the unit of each concentration column,
e.g. to either \% or ppm (or any SI unit) to avoid mixing units in derived analyses.
}
As \code{archchem} is derived from \code{tibble} it is directly compatible with the
data manipulation tools in the tidyverse.
}
\details{
The input data files can be fairly freeform, i.e. no specified elements,
oxides, or isotopic ratios are required and no exact order of these needs to
be adhered to. Analyses can contain as many analytical columns as necessary.

The column that contains the unique samples identifier must be specified using
the \code{ID} argument. If the dataset contains duplicate ids they will be renamed
consecutively using the following convention: \verb{_1},\verb{_2}, ... \verb{_n}.

Metadata contained within the dataset must be marked using the \code{context}
argument. If any column in the dataframe is not specified as context and not
recognised as an analytical column, this will result in an error.

Below detection limit notation (i.e. ‘b.d.’, ‘bd’, ‘b.d.l.’, ‘bdl’, ‘<LOD’,
or ‘<..’) for element and oxide concentrations is specified using the \code{bdl}
argument. One or more notations can be used as is appropriate for the dataset,
and can be notations not included in the list above. The argument
\code{bdl_strategy} is used to specify the value for handling detection limits.
This is to facilitate the different handling needs of the detection limit for
future statistical applications, as opposed to automatically assigning such
values as ‘NA’.

Missing values are allowed anywhere in the data file body, and will be replaced
by \code{NA} automatically.
}
\examples{
library(magrittr)

# reading an archchem table directly from a file
test_file <- system.file("extdata", "test_data_input_good.csv", package = "ASTR")
arch <- read_archchem(test_file, id_column = "Sample", context = 1:7)

# turning a data.frame to an archchem table
test_df <- readr::read_csv(test_file)
arch <- as_archchem(test_df, id_column = "Sample", context = 1:7)

# validating an archchem table
validate(arch)

# extracting subsets of columns
conc <- get_concentration_columns(arch) # see also other get_..._columns functions

# unit-aware arithmetics on archchem columns thanks to the units package
conc$Sb_ppm + conc$Ag_ppb # works
\dontrun{conc$Sb_ppm + conc$`Sn_µg/ml`} # fails with: cannot convert µg/ml into ppm

# converting units
conc$Sb_ppb <- units::set_units(arch$Sb_ppm, "ppb") \%>\%
  magrittr::set_attr("archchem_class", "archchem_concentration")

# removing all units from archchem tables
remove_units(arch)

# applying tidyverse data manipulation on archchem tables
conc_subset <- conc \%>\%
  dplyr::select(-`Sn_µg/ml`, -`Sb_ppm`) \%>\%
  dplyr::filter(`Na2O_wt\%` > units::set_units(1, "\%"))

# unify all concentration units
unify_concentration_unit(conc_subset, "ppm")
# note that the column names are inaccurate now

}
