% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_kde2.R
\name{geom_kde2d}
\alias{geom_kde2d}
\title{Draw 2D Kernel Density Estimate Polygons by Quantiles}
\usage{
geom_kde2d(
  mapping = NULL,
  data = NULL,
  inherit.aes = TRUE,
  quantiles = 4,
  min_prob = 0.02,
  show.legend = NA,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:annotation_borders]{annotation_borders()}}.}

\item{quantiles}{Integer. The number of quantiles to display. For example,
\code{quantiles = 4} (the default) will draw quartiles.}

\item{min_prob}{A numeric value in \verb{[0, 1]}. Sets the lowest probability
quantile to be drawn. The default, \code{0.02}, helps avoid creating
polygons around single outlier points.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display. To include legend keys for all levels, even
when no data exists, use \code{TRUE}.  If \code{NA}, all levels are shown in legend,
but unobserved levels are omitted.}

\item{...}{Other arguments passed on to \code{\link[ggplot2]{layer}}. These are
often aesthetics used to set a fixed value, such as \code{colour = "red"} or
\code{alpha = 0.5}.}
}
\value{
A ggplot2 layer object.
}
\description{
This geom creates polygons based on a 2D kernel density estimate, which is
calculated using the \code{\link[ks]{kde}} function. It serves as an
alternative to \code{\link[ggplot2]{geom_density_2d}}, displaying the results
as filled polygons corresponding to specified quantiles.

If the density estimation fails for a group (e.g., due to too few unique
points), the geom will gracefully fall back to plotting the raw data points
for that group, inheriting aesthetics from \code{\link[ggplot2]{geom_point}}.
}
\section{Aesthetics}{

\code{geom_kde2d()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \strong{\code{group}}
\item \code{alpha}
\item \code{colour} (controls the polygon outline)
\item \code{fill} (controls the polygon fill)
\item \code{linetype}
\item \code{size} (controls the outline thickness)
\item \code{shape} (used for the fallback points)
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.
}

\examples{
library(ggplot2)

# Basic usage with iris data
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, fill = Species)) +
  geom_kde2d()

# Adjusting quantiles to show deciles
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, fill = Species)) +
  geom_kde2d(quantiles = 10, alpha = 0.5)

# Using min_prob to show only density regions above the median
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, fill = Species)) +
  geom_kde2d(quantiles = 10, min_prob = 0.5)

# Creating an outline effect
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_kde2d(quantiles = 1, min_prob = 0, fill = NA)

 # Creating an outline effect, and using coord_cartesian to expand the
 # plot area so the full KDE regions show without clipping
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_kde2d(quantiles = 1, min_prob = 0, fill = NA) +
  coord_cartesian(xlim = c(4, 8.2), ylim = c(2, 4.5), clip = "off")

# Example of fallback behavior
# Create a dataset where one group has too few points for density estimation
set.seed(123)
df <- data.frame(
  x = c(rnorm(50), rnorm(50, 5), rnorm(2, 10)),
  y = c(rnorm(50), rnorm(50, 5), rnorm(2, 10)),
  group = rep(c("A", "B", "C"), c(50, 50, 2))
)

# A message will indicate that group "C" is plotted as points
ggplot(df, aes(x, y, fill = group, colour = group)) +
  geom_kde2d(alpha = 0.4) +
  theme_minimal()
}
\seealso{
\code{\link[ggplot2]{geom_density_2d}}, \code{\link[ggplot2]{geom_point}}, \code{\link[ks]{kde}}
}
\author{
Thomas Rose, \email{thomas.rose@daad-alumni.de}
}
